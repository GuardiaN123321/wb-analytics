╔═══════════════════════════════════════════════════════════════╗
║              ТЕХНИЧЕСКАЯ ДОКУМЕНТАЦИЯ API                     ║
║                  WB Analytics Application                      ║
╚═══════════════════════════════════════════════════════════════╝

📡 WILDBERRIES API
════════════════════════════════════════════════════════════════

1. ПОЛУЧЕНИЕ ИНФОРМАЦИИ О ТОВАРЕ
   ──────────────────────────────

Endpoint: https://card.wb.ru/cards/detail
Метод: GET

Параметры:
• appType=1 - тип приложения
• curr=rub - валюта
• dest=-1029256,-102269,-2162196,-1257786 - регионы доставки
• nm={articleId} - артикул товара
• reg=1 - регион
• spp=0 - скидка продавца

Пример запроса:
https://card.wb.ru/cards/detail?appType=1&curr=rub&dest=-1029256,-102269,-2162196,-1257786&nm=123456789&reg=1&spp=0

Ответ (JSON):
{
  "data": {
    "products": [
      {
        "name": "Название товара",
        "brand": "Бренд",
        "salePriceU": 199900,  // цена в копейках
        "sizes": [
          {
            "stocks": [
              {
                "qty": 100  // количество
              }
            ]
          }
        ],
        "feedbacks": {
          "count": 250  // количество отзывов
        }
      }
    ]
  }
}

2. ГЕНЕРАЦИЯ URL ИЗОБРАЖЕНИЯ
   ─────────────────────────

Шаблон:
https://basket-{host}.wbbasket.ru/vol{vol}/part{part}/{nm}/images/big/1.webp

Где:
• nm - артикул товара
• vol = nm / 100000
• part = nm / 1000
• host - определяется по vol (от 01 до 21)

Соответствие vol → host:
0-143 → 01
144-287 → 02
288-431 → 03
432-719 → 04
720-1007 → 05
1008-1061 → 06
1062-1115 → 07
1116-1169 → 08
1170-1313 → 09
1314-1601 → 10
1602-1655 → 11
1656-1919 → 12
1920-2045 → 13
2046-2189 → 14
2190-2405 → 15
2406-2621 → 16
2622-2837 → 17
2838-3053 → 18
3054-3269 → 19
3270-3485 → 20
3486+ → 21

Пример для артикула 123456789:
vol = 123456789 / 100000 = 1234
part = 123456789 / 1000 = 123456
host = 10 (т.к. vol = 1234 попадает в диапазон 1314-1601)
URL: https://basket-10.wbbasket.ru/vol1234/part123456/123456789/images/big/1.webp

════════════════════════════════════════════════════════════════
📦 МОДЕЛИ ДАННЫХ
════════════════════════════════════════════════════════════════

1. PRODUCT
   ────────

class Product {
  String article;         // Артикул товара
  String name;           // Название товара
  String brand;          // Бренд
  String image;          // URL изображения
  double price;          // Цена в рублях
  int stock;             // Остаток товара
  int reviews;           // Количество отзывов
  int addedAt;           // Timestamp добавления (мс)
  int? lastUpdated;      // Timestamp последнего обновления (мс)
  Map<String, ProductHistory>? history;  // История изменений
}

2. PRODUCT_HISTORY
   ───────────────

class ProductHistory {
  double price;          // Цена на дату
  int stock;             // Остаток на дату
  int reviews;           // Отзывы на дату
}

Key для истории: дата в формате "YYYY-MM-DD"

════════════════════════════════════════════════════════════════
🔧 СЕРВИСЫ
════════════════════════════════════════════════════════════════

1. WB_API_SERVICE
   ──────────────

Методы:
• fetchProductInfo(String articleId) → Future<Product?>
  Получает информацию о товаре по артикулу

• makeProductImageUrl(String productId) → String
  Генерирует URL изображения товара

2. STORAGE_SERVICE
   ───────────────

Методы:
• saveProducts(List<Product> products) → Future<void>
  Сохраняет список товаров

• getProducts() → Future<List<Product>>
  Получает список товаров

• addProduct(Product product) → Future<void>
  Добавляет товар

• removeProduct(String articleId) → Future<void>
  Удаляет товар

• updateProduct(Product product) → Future<void>
  Обновляет товар

• productExists(String articleId) → Future<bool>
  Проверяет существование товара

• clearAll() → Future<void>
  Очищает все данные

════════════════════════════════════════════════════════════════
🎯 ПРОВАЙДЕРЫ
════════════════════════════════════════════════════════════════

PRODUCTS_PROVIDER
─────────────────

Свойства:
• products: List<Product> - список товаров
• isLoading: bool - флаг загрузки
• error: String? - сообщение об ошибке

Методы:
• loadProducts() → Future<void>
  Загружает товары из хранилища

• addProduct(String articleId) → Future<bool>
  Добавляет новый товар

• removeProduct(String articleId) → Future<void>
  Удаляет товар

• updateProduct(String articleId) → Future<void>
  Обновляет данные товара

• updateAllProducts() → Future<void>
  Обновляет все товары

• getProduct(String articleId) → Product?
  Получает товар по артикулу

• clearError() → void
  Очищает ошибку

════════════════════════════════════════════════════════════════
🖥️ ЭКРАНЫ
════════════════════════════════════════════════════════════════

1. HOME_SCREEN
   ───────────
   
   Главный экран приложения
   • Список всех товаров
   • Pull-to-refresh для обновления
   • Кнопка добавления товара
   • Навигация к деталям товара

2. ADD_PRODUCT_SCREEN
   ──────────────────
   
   Экран добавления товара
   • Поле ввода артикула
   • Валидация данных
   • Кнопка сканирования (заготовка)
   • Кнопка добавления

3. PRODUCT_DETAIL_SCREEN
   ─────────────────────
   
   Экран деталей товара
   • Полная информация о товаре
   • Статистика (цена, остаток, отзывы)
   • График изменений
   • Кнопки обновления и шаринга

════════════════════════════════════════════════════════════════
🎨 ВИДЖЕТЫ
════════════════════════════════════════════════════════════════

PRODUCT_CARD
────────────

Карточка товара для списка
• Изображение товара (80x80)
• Название товара
• Артикул и бренд
• Цена и остаток
• Кнопка удаления

════════════════════════════════════════════════════════════════
💾 ХРАНЕНИЕ ДАННЫХ
════════════════════════════════════════════════════════════════

Используется SharedPreferences для локального хранения.

Ключ: 'wb_products'
Формат: JSON массив объектов Product

Структура:
[
  {
    "article": "123456789",
    "name": "Товар",
    "brand": "Бренд",
    "image": "https://...",
    "price": 1999.0,
    "stock": 100,
    "reviews": 50,
    "addedAt": 1697200000000,
    "lastUpdated": 1697286400000,
    "history": {
      "2024-10-13": {
        "price": 1899.0,
        "stock": 120,
        "reviews": 45
      },
      "2024-10-14": {
        "price": 1999.0,
        "stock": 100,
        "reviews": 50
      }
    }
  }
]

════════════════════════════════════════════════════════════════
🔐 БЕЗОПАСНОСТЬ
════════════════════════════════════════════════════════════════

• Нет хранения паролей или токенов
• Все данные локальные
• HTTPS для всех API запросов
• Нет передачи личных данных

════════════════════════════════════════════════════════════════
⚡ ПРОИЗВОДИТЕЛЬНОСТЬ
════════════════════════════════════════════════════════════════

• Кэширование изображений через cached_network_image
• Ленивая загрузка списка товаров
• Оптимизация графиков с fl_chart
• Минимальное количество rebuild'ов через Provider

════════════════════════════════════════════════════════════════
🐛 ОБРАБОТКА ОШИБОК
════════════════════════════════════════════════════════════════

• HTTP ошибки перехватываются и отображаются пользователю
• Ошибки сериализации логируются
• Fallback изображения для сломанных ссылок
• Graceful degradation при отсутствии интернета

════════════════════════════════════════════════════════════════
🚀 БУДУЩИЕ УЛУЧШЕНИЯ
════════════════════════════════════════════════════════════════

1. Сканер штрих-кодов
   • Интеграция mobile_scanner
   • Распознавание штрих-кодов WB

2. Push-уведомления
   • Firebase Cloud Messaging
   • Уведомления об изменении цен

3. Облачная синхронизация
   • Firebase Firestore
   • Синхронизация между устройствами

4. Расширенная аналитика
   • Прогнозирование цен
   • Сравнение товаров
   • Рекомендации

5. Экспорт данных
   • CSV/Excel экспорт
   • PDF отчеты

6. Дополнительные маркетплейсы
   • Ozon
   • Яндекс.Маркет
   • AliExpress

════════════════════════════════════════════════════════════════
📊 ЗАВИСИМОСТИ
════════════════════════════════════════════════════════════════

Основные:
• flutter (SDK)
• provider: ^6.1.1
• http: ^1.2.0
• shared_preferences: ^2.2.2
• fl_chart: ^0.66.0
• cached_network_image: ^3.3.1
• intl: ^0.19.0

Dev:
• flutter_test (SDK)
• flutter_lints: ^5.0.0
• build_runner: ^2.4.8
• json_serializable: ^6.7.1

════════════════════════════════════════════════════════════════
🔗 ПОЛЕЗНЫЕ ССЫЛКИ
════════════════════════════════════════════════════════════════

• Flutter Docs: https://docs.flutter.dev/
• Provider Package: https://pub.dev/packages/provider
• FL Chart: https://pub.dev/packages/fl_chart
• HTTP Package: https://pub.dev/packages/http
• Shared Preferences: https://pub.dev/packages/shared_preferences

════════════════════════════════════════════════════════════════

           Документация актуальна на октябрь 2025

════════════════════════════════════════════════════════════════

